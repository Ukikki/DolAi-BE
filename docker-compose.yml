services:
  redis:
    image: redis:6.0.9
    container_name: redis-container
    restart: always
    env_file:
      - .env
    ports:
      - "6379:6379"
    #command: redis-server --requirepass ${REDIS_PASSWORD}
    command: >
      sh -c "redis-server --requirepass $${REDIS_PASSWORD}"
    environment:
      - REDIS_DATABASE=dolai
      - REDIS_HOST=redis-container  # 변경된 부분
      - REDIS_PORT=6379
      # REDIS_PASSWORD는 .env에서 불러옴
    networks:
      backend_network:
        ipv4_address: 172.28.0.2

  mysql:
    image: mysql:8.0
    container_name: mysql-container
    restart: always
    env_file:
      - .env  # .env 파일 로드
    environment:
      - MYSQL_DATABASE=dolai
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}  # 루트 비밀번호
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}  # dolai DB 전용 사용자 비밀번호
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      backend_network:
        ipv4_address: 172.28.0.7  # MySQL 고정 IP

  arangodb:
    image: arangodb:latest
    container_name: arangodb-container
    restart: always
    env_file:
      - .env  # .env 파일 로드
    environment:
      - ARANGO_DATABASE=dolai
      - ARANGO_ROOT_PASSWORD=${ARANGO_PASSWORD}  # ArangoDB 루트 비밀번호
    ports:
      - "8529:8529"
    volumes:
      - arangodb_data:/var/lib/arangodb3
    networks:
      backend_network:
        ipv4_address: 172.28.0.5  # ArangoDB 고정 IP

  backend:
    build: ./backend # 백엔드 애플리케이션 빌드 위치
    container_name: backend-container
    env_file:
      - .env
    volumes:
      - ./.env:/app/.env
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/dolai  # MySQL 컨테이너의 호스트 이름
    depends_on:
      - mysql
      - arangodb
      - redis
    networks:
      backend_network:
        ipv4_address: 172.28.0.8  # Backend 고정 IP
    ports:
      - "8080:8080"  # Spring Boot 포트 매핑

  mediasoup-server:
    build:
      context: ./mediasoup-sfu
      dockerfile: Dockerfile
    container_name: mediasoup-server
    ports:
      - "4443:4443"           # Mediasoup signaling
      - "3478:3478/udp"       # TURN server
    networks:
      backend_network:
        ipv4_address: 172.28.0.4  # MediaSoup Server 고정 IP

  mediasoup-app:
    build:
      context: .
      dockerfile: Dockerfile.mediasoup
    container_name: mediasoup-app
    working_dir: /app
    volumes:
      - ./mediasoup-sfu:/app
    command: bash -c "npm install && node app.js"
    ports:
      - "3000:3000"
    networks:
      backend_network:
        ipv4_address: 172.28.0.6  # MediaSoup App 고정 IP

  whisper:
    build:
      context: ./whisper-server
      dockerfile: Dockerfile
    container_name: whisper-server
    stdin_open: true
    tty: true
    volumes:
      - ./whisper-server:/app
    ports:
      - "5001:5001"
    networks:
      backend_network:
        ipv4_address: 172.28.0.3  # Whisper 고정 IP
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - ./.env

  nginx:
    build:
      context: ./nginx
    ports:
      - "80:80"
      - "443:443" # 선택
    depends_on:
      - backend
      - mediasoup-app
      - whisper
    networks:
      backend_network:
        ipv4_address: 172.28.0.9  # Nginx 고정 IP

networks:
  backend_network:
    name: backend_network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1


volumes:
  mysql_data:
  arangodb_data:
