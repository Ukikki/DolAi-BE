package com.dolai.backend.nlp.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;

@Slf4j
@Service
@RequiredArgsConstructor
public class TopicExtractionServiceImpl implements TopicExtractionService {

    @Qualifier("geminiRestTemplate")
    private final RestTemplate restTemplate;

    @Value("${gemini.api.url}")
    private String geminiApiUrl;

    @Value("${gemini.api.key}")
    private String geminiApiKey;

    @Override
    public List<String> extract(String text) {
        if (text == null || text.trim().length() < 5) {
            return List.of(); // Gemini Ìò∏Ï∂ú X
        }
        // Gemini API Ìò∏Ï∂ú
        String prompt = """
                ÌöåÏùòÏö© ÌïµÏã¨ ÌÇ§ÏõåÎìúÎßå Îã®Í≥ÑÎ≥ÑÎ°ú Ï∂îÏ∂úÌï¥.
                
                üîπ Ï≤òÎ¶¨ Îã®Í≥Ñ:
                1Îã®Í≥Ñ: ÌÖçÏä§Ìä∏ÏóêÏÑú **Î™®Îì† Î™ÖÏÇ¨**Î•º ÏãùÎ≥ÑÌï¥.
                2Îã®Í≥Ñ: **Î∂àÌïÑÏöîÌïú ÏùºÎ∞ò Îã®Ïñ¥, Î∂àÎ™ÖÌôïÌïú Î™ÖÏÇ¨, Ï∂îÏÉÅÏ†Å Í∞úÎÖê, Í∞êÌÉÑÏÇ¨, Ï°∞ÏÇ¨ÏÑ± Îã®Ïñ¥**Î•º Ï†úÍ±∞Ìï¥.
                3Îã®Í≥Ñ: **Íµ¨Ï≤¥Ï†ÅÏù¥Í≥† Î™ÖÌôïÌïú Í∞úÎÖêÏù¥ÎÇò ÏÇ¨Ïïà**Îßå ÎÇ®Í≤®.
                4Îã®Í≥Ñ: Ï§ëÎ≥µÏùÄ Ï†úÍ±∞ÌïòÍ≥†, **ÌöåÏùòÏóêÏÑú Ï§ëÏöîÌïòÍ≤å Îã§Î£∞ ÎßåÌïú ÏàúÏÑúÎ°ú Ï†ïÎ†¨Ìï¥.**
                5Îã®Í≥Ñ: **ÏâºÌëú(,)Î°úÎßå Íµ¨Î∂ÑÎêú Ìïú Ï§Ñ**Î°ú Ï∂úÎ†•Ìï¥. Îã§Î•∏ ÌÖçÏä§Ìä∏Îäî Ï∂úÎ†•ÌïòÏßÄ Îßà.
                
                üîπ Î∞òÎìúÏãú Ï†úÏô∏Ìï† Îã®Ïñ¥ Ïú†Ìòï:
                - **ÎåÄÎ™ÖÏÇ¨ Î∞è ÏßÄÏãúÏñ¥**: Í∑∏Í≤É, Ïù¥Í±∞, Í∑∏Í±∞, Ï†ÄÌù¨, Ïö∞Î¶¨
                - **ÌòïÏãùÏ†ÅÏù∏ Î™ÖÏÇ¨/Î∂àÎ™ÖÌôïÌïú Ï∂îÏÉÅÏñ¥**: Í≤ΩÏö∞, ÏÉÅÌô©, ÎÇ¥Ïö©, Í≤É, Ï†ê, Îïå, Î∞©Ïãù, Î∞©Î≤ï, Ï†ïÎèÑ, ÏùòÎØ∏, Ïó¨Î∂Ä
                - **ÏãúÍ∞Ñ/ÏàúÏÑú/ÏßÄÏãú**: Ïù¥Î≤à, Îã§Ïùå, Ïù¥Ï†Ñ, Ïù¥ÌõÑ, Ï†ÑÌõÑ, ÏúÑ, ÏïÑÎûò, ÏúÑÌï¥, ÌÜµÌï¥, Í¥ÄÎ†®
                - **Î∂àÏö©Ïñ¥**: ÌïòÎã§, ÎêòÎã§, Ï¢ãÏùå, ÏûàÏùå, ÏóÜÏùå, Í∞ÄÎä•, ÌïÑÏöî, Ï§ëÏöî
                - **ÌöåÌôîÏ≤¥/Í∞êÌÉÑÏÇ¨/Ï°∞ÏÇ¨ÏÑ±**: ÎÑ§, Ïùå, ÏïÑ, Ïñ¥, Í∑∏, Ïûê, Ï¢Ä, Îã§Îßå, Ïó≠Ïãú, ÎßåÏïΩ, ÌäπÌûà, Í∑∏Î¶¨Í≥†
                
                üîπ Ï¢ãÏùÄ ÌÇ§ÏõåÎìú ÏòàÏãú:
                ÎßàÏºÄÌåÖ Ï†ÑÎûµ, Í≥†Í∞ù Î∂ÑÏÑù, ÏòàÏÇ∞ Í≥ÑÌöç, ÌîÑÎ°úÏ†ùÌä∏ ÏùºÏ†ï, ÌíàÏßà Í¥ÄÎ¶¨, ÏãúÏû• Ï°∞ÏÇ¨, ÏÇ¨Ïö©Ïûê ÌîºÎìúÎ∞±, ÏùºÏ†ï Ï°∞Ï†ï
                
                üîπ ÎÇòÏÅú ÌÇ§ÏõåÎìú ÏòàÏãú:
                Ïö∞Î¶¨, Ïù¥Î≤à, Îã§Ïùå, Í∑∏Í≤É, ÌïòÎã§, Î™©Ìëú, Í≤∞Í≥º, Î∞©Î≤ï, ÎÇ¥Ïö©, Ï†ïÎèÑ, ÏúÑÌï¥, ÎßåÏ°±
                
                ‚ùó Ï£ºÏùò:
                ÌÇ§ÏõåÎìúÍ∞Ä ÏóÜÎã§Í≥† ÌåêÎã®ÎêòÎ©¥, ÏïÑÎ¨¥Í≤ÉÎèÑ Ï∂úÎ†•ÌïòÏßÄ Îßà. ("null", "ÏóÜÏùå", Îπà Î¶¨Ïä§Ìä∏ Îì± Ïñ¥Îñ§ ÌòïÌÉúÎèÑ Ï∂úÎ†•ÌïòÏßÄ Îßà)
                
                ÌÖçÏä§Ìä∏:
                [Ïó¨Í∏∞Ïóê ÌÖçÏä§Ìä∏ ÏûÖÎ†•]
                
                """ + text;

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.add("x-goog-api-key", geminiApiKey);

        Map<String, Object> requestBody = Map.of(
                "contents", List.of(
                        Map.of("parts", List.of(Map.of("text", prompt)))
                )
        );

        HttpEntity<Map<String, Object>> entity = new HttpEntity<>(requestBody, headers);

        try {
            ResponseEntity<Map> response = restTemplate.postForEntity(geminiApiUrl, entity, Map.class);
            log.info("Gemini ÏùëÎãµ: {}", response.getBody()); // Ïù¥Í±∏ Íº≠ Ï∞çÏñ¥Î¥ê
            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                Map content = (Map) ((List) response.getBody().get("candidates")).get(0);
                Map parts = (Map) ((List) ((Map) content.get("content")).get("parts")).get(0);
                String resultText = (String) parts.get("text");
                return Arrays.stream(resultText.split(","))
                        .map(String::trim)
                        .filter(s -> !s.isEmpty())
                        .toList();
            } else {
                log.warn("Gemini API ÏùëÎãµ Ïã§Ìå®: {}", response.getStatusCode());
            }
        } catch (Exception e) {
            log.error("Gemini API Ìò∏Ï∂ú Ï§ë Ïò§Î•ò Î∞úÏÉù", e);
        }

        return Collections.emptyList();
    }
}