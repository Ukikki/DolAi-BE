spring.application.name=backend
server.address=0.0.0.0
server.port=8080

# MySQL ?? (local)
#spring.datasource.url=jdbc:mysql://localhost:3306/dolai
spring.datasource.url=jdbc:mysql://mysql-container:3306/dolai
spring.datasource.username=root
spring.datasource.password=1234
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# MySQL Dialect ??
spring.jpa.hibernate.ddl-auto=update
# SQL ?? ?? ??
spring.jpa.show-sql=false
# Hibernate ?? SQL ?? ?? ??
logging.level.org.hibernate.SQL=off
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=off
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

# ArangoDB ?? (local)
#arangodb.host=localhost

# ArangoDB(별도 컨테이너이기 때문에 컨테이너 이름으로 접근)
arangodb.host=arangodb

  # arangodb-container
arangodb.port=8529
arangodb.user=root
arangodb.password=ukikki1212
  # ${ARANGO_PASSWORD} ?? ? ?? ??
arangodb.database=dolai
arangodb.protocol=HTTP_JSON

# ??? ?? ??
spring.data.arango.auto-index-creation=true
spring.data.arango.auto-index-creation-for-collections=true
spring.data.arango.auto-index-creation-for-graphs=true
spring.data.arango.auto-index-creation-for-documents=true
spring.data.arango.auto-index-creation-for-edges=true

spring.data.redis.host=redis-container
spring.data.redis.port=6379
spring.data.redis.password=ukikki1212

spring.config.import=classpath:secret-application.properties

doc.template-dir=backend/src/main/resources/
doc.output-dir=backend/output/

#spring.mvc.pathmatch.matching-strategy=ANT_PATH_MATCHER

# ? WebSocket ?? ??? ?? ??? ??
spring.mvc.throw-exception-if-no-handler-found=true
spring.web.resources.add-mappings=false
x
