import {
  __commonJS
} from "./chunk-JVWSFFO4.js";

// node_modules/h264-profile-level-id/node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/h264-profile-level-id/node_modules/ms/index.js"(exports, module) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/h264-profile-level-id/node_modules/debug/src/common.js
var require_common = __commonJS({
  "node_modules/h264-profile-level-id/node_modules/debug/src/common.js"(exports, module) {
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
          if (!debug.enabled) {
            return;
          }
          const self = debug;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self.diff = ms;
          self.prev = prevTime;
          self.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index];
              match = formatter.call(self, val);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self, args);
          const logFn = self.log || createDebug.log;
          logFn.apply(self, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy;
        Object.defineProperty(debug, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug);
        }
        return debug;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        const split = (typeof namespaces === "string" ? namespaces : "").trim().replace(" ", ",").split(",").filter(Boolean);
        for (const ns of split) {
          if (ns[0] === "-") {
            createDebug.skips.push(ns.slice(1));
          } else {
            createDebug.names.push(ns);
          }
        }
      }
      function matchesTemplate(search, template) {
        let searchIndex = 0;
        let templateIndex = 0;
        let starIndex = -1;
        let matchIndex = 0;
        while (searchIndex < search.length) {
          if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === "*")) {
            if (template[templateIndex] === "*") {
              starIndex = templateIndex;
              matchIndex = searchIndex;
              templateIndex++;
            } else {
              searchIndex++;
              templateIndex++;
            }
          } else if (starIndex !== -1) {
            templateIndex = starIndex + 1;
            matchIndex++;
            searchIndex = matchIndex;
          } else {
            return false;
          }
        }
        while (templateIndex < template.length && template[templateIndex] === "*") {
          templateIndex++;
        }
        return templateIndex === template.length;
      }
      function disable() {
        const namespaces = [
          ...createDebug.names,
          ...createDebug.skips.map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        for (const skip of createDebug.skips) {
          if (matchesTemplate(name, skip)) {
            return false;
          }
        }
        for (const ns of createDebug.names) {
          if (matchesTemplate(name, ns)) {
            return true;
          }
        }
        return false;
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module.exports = setup;
  }
});

// node_modules/h264-profile-level-id/node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "node_modules/h264-profile-level-id/node_modules/debug/src/browser.js"(exports, module) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = /* @__PURE__ */ (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      let m;
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r;
      try {
        r = exports.storage.getItem("debug");
      } catch (error) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module.exports = require_common()(exports);
    var { formatters } = module.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// node_modules/h264-profile-level-id/lib/Logger.js
var require_Logger = __commonJS({
  "node_modules/h264-profile-level-id/lib/Logger.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Logger = void 0;
    var debug_1 = __importDefault(require_browser());
    var APP_NAME = "h264-profile-level-id";
    var Logger = class {
      constructor(prefix) {
        if (prefix) {
          this._debug = (0, debug_1.default)(`${APP_NAME}:${prefix}`);
          this._warn = (0, debug_1.default)(`${APP_NAME}:WARN:${prefix}`);
          this._error = (0, debug_1.default)(`${APP_NAME}:ERROR:${prefix}`);
        } else {
          this._debug = (0, debug_1.default)(APP_NAME);
          this._warn = (0, debug_1.default)(`${APP_NAME}:WARN`);
          this._error = (0, debug_1.default)(`${APP_NAME}:ERROR`);
        }
        this._debug.log = console.info.bind(console);
        this._warn.log = console.warn.bind(console);
        this._error.log = console.error.bind(console);
      }
      get debug() {
        return this._debug;
      }
      get warn() {
        return this._warn;
      }
      get error() {
        return this._error;
      }
    };
    exports.Logger = Logger;
  }
});

// node_modules/h264-profile-level-id/lib/index.js
var require_lib = __commonJS({
  "node_modules/h264-profile-level-id/lib/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProfileLevelId = exports.Level = exports.Profile = void 0;
    exports.parseProfileLevelId = parseProfileLevelId;
    exports.profileLevelIdToString = profileLevelIdToString;
    exports.profileToString = profileToString;
    exports.levelToString = levelToString;
    exports.parseSdpProfileLevelId = parseSdpProfileLevelId;
    exports.isSameProfile = isSameProfile;
    exports.isSameProfileAndLevel = isSameProfileAndLevel;
    exports.generateProfileLevelIdStringForAnswer = generateProfileLevelIdStringForAnswer;
    exports.supportedLevel = supportedLevel;
    var Logger_1 = require_Logger();
    var logger = new Logger_1.Logger();
    var Profile;
    (function(Profile2) {
      Profile2[Profile2["ConstrainedBaseline"] = 1] = "ConstrainedBaseline";
      Profile2[Profile2["Baseline"] = 2] = "Baseline";
      Profile2[Profile2["Main"] = 3] = "Main";
      Profile2[Profile2["ConstrainedHigh"] = 4] = "ConstrainedHigh";
      Profile2[Profile2["High"] = 5] = "High";
      Profile2[Profile2["PredictiveHigh444"] = 6] = "PredictiveHigh444";
    })(Profile || (exports.Profile = Profile = {}));
    var Level;
    (function(Level2) {
      Level2[Level2["L1_b"] = 0] = "L1_b";
      Level2[Level2["L1"] = 10] = "L1";
      Level2[Level2["L1_1"] = 11] = "L1_1";
      Level2[Level2["L1_2"] = 12] = "L1_2";
      Level2[Level2["L1_3"] = 13] = "L1_3";
      Level2[Level2["L2"] = 20] = "L2";
      Level2[Level2["L2_1"] = 21] = "L2_1";
      Level2[Level2["L2_2"] = 22] = "L2_2";
      Level2[Level2["L3"] = 30] = "L3";
      Level2[Level2["L3_1"] = 31] = "L3_1";
      Level2[Level2["L3_2"] = 32] = "L3_2";
      Level2[Level2["L4"] = 40] = "L4";
      Level2[Level2["L4_1"] = 41] = "L4_1";
      Level2[Level2["L4_2"] = 42] = "L4_2";
      Level2[Level2["L5"] = 50] = "L5";
      Level2[Level2["L5_1"] = 51] = "L5_1";
      Level2[Level2["L5_2"] = 52] = "L5_2";
    })(Level || (exports.Level = Level = {}));
    var ProfileLevelId = class {
      constructor(profile, level) {
        this.profile = profile;
        this.level = level;
      }
    };
    exports.ProfileLevelId = ProfileLevelId;
    var DefaultProfileLevelId = new ProfileLevelId(Profile.ConstrainedBaseline, Level.L3_1);
    var BitPattern = class {
      constructor(str) {
        this.mask = ~byteMaskString("x", str);
        this.masked_value = byteMaskString("1", str);
      }
      isMatch(value) {
        return this.masked_value === (value & this.mask);
      }
    };
    var ProfilePattern = class {
      constructor(profile_idc, profile_iop, profile) {
        this.profile_idc = profile_idc;
        this.profile_iop = profile_iop;
        this.profile = profile;
      }
    };
    var ProfilePatterns = [
      new ProfilePattern(66, new BitPattern("x1xx0000"), Profile.ConstrainedBaseline),
      new ProfilePattern(77, new BitPattern("1xxx0000"), Profile.ConstrainedBaseline),
      new ProfilePattern(88, new BitPattern("11xx0000"), Profile.ConstrainedBaseline),
      new ProfilePattern(66, new BitPattern("x0xx0000"), Profile.Baseline),
      new ProfilePattern(88, new BitPattern("10xx0000"), Profile.Baseline),
      new ProfilePattern(77, new BitPattern("0x0x0000"), Profile.Main),
      new ProfilePattern(100, new BitPattern("00000000"), Profile.High),
      new ProfilePattern(100, new BitPattern("00001100"), Profile.ConstrainedHigh),
      new ProfilePattern(244, new BitPattern("00000000"), Profile.PredictiveHigh444)
    ];
    var LevelConstraints = [
      {
        max_macroblocks_per_second: 1485,
        max_macroblock_frame_size: 99,
        level: Level.L1
      },
      {
        max_macroblocks_per_second: 1485,
        max_macroblock_frame_size: 99,
        level: Level.L1_b
      },
      {
        max_macroblocks_per_second: 3e3,
        max_macroblock_frame_size: 396,
        level: Level.L1_1
      },
      {
        max_macroblocks_per_second: 6e3,
        max_macroblock_frame_size: 396,
        level: Level.L1_2
      },
      {
        max_macroblocks_per_second: 11880,
        max_macroblock_frame_size: 396,
        level: Level.L1_3
      },
      {
        max_macroblocks_per_second: 11880,
        max_macroblock_frame_size: 396,
        level: Level.L2
      },
      {
        max_macroblocks_per_second: 19800,
        max_macroblock_frame_size: 792,
        level: Level.L2_1
      },
      {
        max_macroblocks_per_second: 20250,
        max_macroblock_frame_size: 1620,
        level: Level.L2_2
      },
      {
        max_macroblocks_per_second: 40500,
        max_macroblock_frame_size: 1620,
        level: Level.L3
      },
      {
        max_macroblocks_per_second: 108e3,
        max_macroblock_frame_size: 3600,
        level: Level.L3_1
      },
      {
        max_macroblocks_per_second: 216e3,
        max_macroblock_frame_size: 5120,
        level: Level.L3_2
      },
      {
        max_macroblocks_per_second: 245760,
        max_macroblock_frame_size: 8192,
        level: Level.L4
      },
      {
        max_macroblocks_per_second: 245760,
        max_macroblock_frame_size: 8192,
        level: Level.L4_1
      },
      {
        max_macroblocks_per_second: 522240,
        max_macroblock_frame_size: 8704,
        level: Level.L4_2
      },
      {
        max_macroblocks_per_second: 589824,
        max_macroblock_frame_size: 22080,
        level: Level.L5
      },
      {
        max_macroblocks_per_second: 983040,
        max_macroblock_frame_size: 36864,
        level: Level.L5_1
      },
      {
        max_macroblocks_per_second: 2073600,
        max_macroblock_frame_size: 36864,
        level: Level.L5_2
      }
    ];
    function parseProfileLevelId(str) {
      const ConstraintSet3Flag = 16;
      if (typeof str !== "string" || str.length !== 6) {
        return void 0;
      }
      const profile_level_id_numeric = parseInt(str, 16);
      if (profile_level_id_numeric === 0) {
        return void 0;
      }
      const level_idc = profile_level_id_numeric & 255;
      const profile_iop = profile_level_id_numeric >> 8 & 255;
      const profile_idc = profile_level_id_numeric >> 16 & 255;
      let level;
      switch (level_idc) {
        case Level.L1_1: {
          level = (profile_iop & ConstraintSet3Flag) !== 0 ? Level.L1_b : Level.L1_1;
          break;
        }
        case Level.L1:
        case Level.L1_2:
        case Level.L1_3:
        case Level.L2:
        case Level.L2_1:
        case Level.L2_2:
        case Level.L3:
        case Level.L3_1:
        case Level.L3_2:
        case Level.L4:
        case Level.L4_1:
        case Level.L4_2:
        case Level.L5:
        case Level.L5_1:
        case Level.L5_2: {
          level = level_idc;
          break;
        }
        // Unrecognized level_idc.
        default: {
          logger.warn(`parseProfileLevelId() | unrecognized level_idc [str:${str}, level_idc:${level_idc}]`);
          return void 0;
        }
      }
      for (const pattern of ProfilePatterns) {
        if (profile_idc === pattern.profile_idc && pattern.profile_iop.isMatch(profile_iop)) {
          logger.debug(`parseProfileLevelId() | result [str:${str}, profile:${pattern.profile}, level:${level}]`);
          return new ProfileLevelId(pattern.profile, level);
        }
      }
      logger.warn(`parseProfileLevelId() | unrecognized profile_idc/profile_iop combination [str:${str}, profile_idc:${profile_idc}, profile_iop:${profile_iop}]`);
      return void 0;
    }
    function profileLevelIdToString(profile_level_id) {
      if (profile_level_id.level == Level.L1_b) {
        switch (profile_level_id.profile) {
          case Profile.ConstrainedBaseline: {
            return "42f00b";
          }
          case Profile.Baseline: {
            return "42100b";
          }
          case Profile.Main: {
            return "4d100b";
          }
          // Level 1_b is not allowed for other profiles.
          default: {
            logger.warn(`profileLevelIdToString() | Level 1_b not is allowed for profile ${profile_level_id.profile}`);
            return void 0;
          }
        }
      }
      let profile_idc_iop_string;
      switch (profile_level_id.profile) {
        case Profile.ConstrainedBaseline: {
          profile_idc_iop_string = "42e0";
          break;
        }
        case Profile.Baseline: {
          profile_idc_iop_string = "4200";
          break;
        }
        case Profile.Main: {
          profile_idc_iop_string = "4d00";
          break;
        }
        case Profile.ConstrainedHigh: {
          profile_idc_iop_string = "640c";
          break;
        }
        case Profile.High: {
          profile_idc_iop_string = "6400";
          break;
        }
        case Profile.PredictiveHigh444: {
          profile_idc_iop_string = "f400";
          break;
        }
        default: {
          logger.warn(`profileLevelIdToString() | unrecognized profile ${profile_level_id.profile}`);
          return void 0;
        }
      }
      let levelStr = profile_level_id.level.toString(16);
      if (levelStr.length === 1) {
        levelStr = `0${levelStr}`;
      }
      return `${profile_idc_iop_string}${levelStr}`;
    }
    function profileToString(profile) {
      switch (profile) {
        case Profile.ConstrainedBaseline: {
          return "ConstrainedBaseline";
        }
        case Profile.Baseline: {
          return "Baseline";
        }
        case Profile.Main: {
          return "Main";
        }
        case Profile.ConstrainedHigh: {
          return "ConstrainedHigh";
        }
        case Profile.High: {
          return "High";
        }
        case Profile.PredictiveHigh444: {
          return "PredictiveHigh444";
        }
        default: {
          logger.warn(`profileToString() | unrecognized profile ${profile}`);
          return void 0;
        }
      }
    }
    function levelToString(level) {
      switch (level) {
        case Level.L1_b: {
          return "1b";
        }
        case Level.L1: {
          return "1";
        }
        case Level.L1_1: {
          return "1.1";
        }
        case Level.L1_2: {
          return "1.2";
        }
        case Level.L1_3: {
          return "1.3";
        }
        case Level.L2: {
          return "2";
        }
        case Level.L2_1: {
          return "2.1";
        }
        case Level.L2_2: {
          return "2.2";
        }
        case Level.L3: {
          return "3";
        }
        case Level.L3_1: {
          return "3.1";
        }
        case Level.L3_2: {
          return "3.2";
        }
        case Level.L4: {
          return "4";
        }
        case Level.L4_1: {
          return "4.1";
        }
        case Level.L4_2: {
          return "4.2";
        }
        case Level.L5: {
          return "5";
        }
        case Level.L5_1: {
          return "5.1";
        }
        case Level.L5_2: {
          return "5.2";
        }
        default: {
          logger.warn(`levelToString() | unrecognized level ${level}`);
          return void 0;
        }
      }
    }
    function parseSdpProfileLevelId(params = {}) {
      const profile_level_id = params["profile-level-id"];
      return profile_level_id ? parseProfileLevelId(profile_level_id) : DefaultProfileLevelId;
    }
    function isSameProfile(params1 = {}, params2 = {}) {
      const profile_level_id_1 = parseSdpProfileLevelId(params1);
      const profile_level_id_2 = parseSdpProfileLevelId(params2);
      return Boolean(profile_level_id_1 && profile_level_id_2 && profile_level_id_1.profile === profile_level_id_2.profile);
    }
    function isSameProfileAndLevel(params1 = {}, params2 = {}) {
      const profile_level_id_1 = parseSdpProfileLevelId(params1);
      const profile_level_id_2 = parseSdpProfileLevelId(params2);
      return Boolean(profile_level_id_1 && profile_level_id_2 && profile_level_id_1.profile === profile_level_id_2.profile && profile_level_id_1.level == profile_level_id_2.level);
    }
    function generateProfileLevelIdStringForAnswer(local_supported_params = {}, remote_offered_params = {}) {
      if (!local_supported_params["profile-level-id"] && !remote_offered_params["profile-level-id"]) {
        logger.warn("generateProfileLevelIdStringForAnswer() | profile-level-id missing in local and remote params");
        return void 0;
      }
      const local_profile_level_id = parseSdpProfileLevelId(local_supported_params);
      const remote_profile_level_id = parseSdpProfileLevelId(remote_offered_params);
      if (!local_profile_level_id) {
        throw new TypeError("invalid local_profile_level_id");
      }
      if (!remote_profile_level_id) {
        throw new TypeError("invalid remote_profile_level_id");
      }
      if (local_profile_level_id.profile !== remote_profile_level_id.profile) {
        throw new TypeError("H264 Profile mismatch");
      }
      const level_asymmetry_allowed = isLevelAsymmetryAllowed(local_supported_params) && isLevelAsymmetryAllowed(remote_offered_params);
      const local_level = local_profile_level_id.level;
      const remote_level = remote_profile_level_id.level;
      const min_level = minLevel(local_level, remote_level);
      const answer_level = level_asymmetry_allowed ? local_level : min_level;
      logger.debug(`generateProfileLevelIdStringForAnswer() | result [profile:${local_profile_level_id.profile}, level:${answer_level}]`);
      return profileLevelIdToString(new ProfileLevelId(local_profile_level_id.profile, answer_level));
    }
    function supportedLevel(max_frame_pixel_count, max_fps) {
      const PixelsPerMacroblock = 16 * 16;
      for (let i = LevelConstraints.length - 1; i >= 0; --i) {
        const level_constraint = LevelConstraints[i];
        if (level_constraint.max_macroblock_frame_size * PixelsPerMacroblock <= max_frame_pixel_count && level_constraint.max_macroblocks_per_second <= max_fps * level_constraint.max_macroblock_frame_size) {
          logger.debug(`supportedLevel() | result [max_frame_pixel_count:${max_frame_pixel_count}, max_fps:${max_fps}, level:${level_constraint.level}]`);
          return level_constraint.level;
        }
      }
      logger.warn(`supportedLevel() | no level supported [max_frame_pixel_count:${max_frame_pixel_count}, max_fps:${max_fps}]`);
      return void 0;
    }
    function byteMaskString(c, str) {
      return Number(str[0] === c) << 7 | Number(str[1] === c) << 6 | Number(str[2] === c) << 5 | Number(str[3] === c) << 4 | Number(str[4] === c) << 3 | Number(str[5] === c) << 2 | Number(str[6] === c) << 1 | Number(str[7] === c) << 0;
    }
    function isLessLevel(a, b) {
      if (a === Level.L1_b) {
        return b !== Level.L1 && b !== Level.L1_b;
      }
      if (b === Level.L1_b) {
        return a !== Level.L1;
      }
      return a < b;
    }
    function minLevel(a, b) {
      return isLessLevel(a, b) ? a : b;
    }
    function isLevelAsymmetryAllowed(params = {}) {
      const level_asymmetry_allowed = params["level-asymmetry-allowed"];
      return level_asymmetry_allowed === true || level_asymmetry_allowed === 1 || level_asymmetry_allowed === "1";
    }
  }
});
export default require_lib();
//# sourceMappingURL=h264-profile-level-id.js.map
