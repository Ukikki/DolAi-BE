/**
 * Read the value of `bit` position` of `value`.
 *
 * @category Utils
 * @hidden
 */
export declare function readBit({ value, bit }: {
    value: number;
    bit: number;
}): boolean;
/**
 * Write `flag` in `bit` position` of `value` and return updated value.
 *
 * @category Utils
 * @hidden
 */
export declare function writeBit({ value, bit, flag }: {
    value: number;
    bit: number;
    flag: boolean;
}): number;
/**
 * Toggle value of `bit` position` of `value` and return update value.
 *
 * @category Utils
 * @hidden
 */
export declare function toggleBit({ value, bit }: {
    value: number;
    bit: number;
}): number;
/**
 * Read the value of the enabled bits of `mask` of byte `byte`.
 *
 * @category Utils
 * @hidden
 */
export declare function readBits({ byte, mask }: {
    byte: number;
    mask: number;
}): number;
/**
 * Write `value` in the enabled bits of `mask` of byte `byte` and return
 * updated value.
 *
 * @category Utils
 * @hidden
 */
export declare function writeBits({ byte, mask, value }: {
    byte: number;
    mask: number;
    value: number;
}): number;
/**
 * Read the value of `bit` position` of byte `pos` in `view`.
 *
 * @category Utils
 * @hidden
 */
export declare function readBitInDataView({ view, pos, bit }: {
    view: DataView;
    pos: number;
    bit: number;
}): boolean;
/**
 * Write `flag` in `bit` position` of byte `pos` in `view`.
 *
 * @category Utils
 * @hidden
 */
export declare function writeBitInDataView({ view, pos, bit, flag }: {
    view: DataView;
    pos: number;
    bit: number;
    flag: boolean;
}): void;
/**
 * Toggle value of `bit` position` of byte `pos` in `view`.
 *
 * @category Utils
 * @hidden
 */
export declare function toggleBitInDataView({ view, pos, bit }: {
    view: DataView;
    pos: number;
    bit: number;
}): void;
/**
 * Read the value of the enabled bits of `mask` of byte `pos` in `view`.
 *
 * @category Utils
 * @hidden
 */
export declare function readBitsInDataView({ view, pos, mask }: {
    view: DataView;
    pos: number;
    mask: number;
}): number;
/**
 * Write `value` in the enabled bits of `mask` of byte `pos` in `view`.
 *
 * @category Utils
 * @hidden
 */
export declare function writeBitsInDataView({ view, pos, mask, value }: {
    view: DataView;
    pos: number;
    mask: number;
    value: number;
}): void;
//# sourceMappingURL=bitOps.d.ts.map