import { FeedbackPacket, FeedbackPacketDump } from './FeedbackPacket';
/**
 * RTCP SLI packet info dump.
 *
 * @category RTCP
 */
export type SliPacketDump = FeedbackPacketDump & {
    items: {
        first: number;
        number: number;
        pictureId: number;
    }[];
};
/**
 * RTCP SLI packet (RTCP Payload Specific Feedback).
 *
 * ```text
 *  0                   1                   2                   3
 *  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 * |V=2|P|  FMT=2  |  PT=PSFB=206  |          length               |
 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 * |                  SSRC of packet sender                        |
 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 * |                  SSRC of media source                         |
 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 * |            First        |        Number           | PictureID |
 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 * :                              ...                              :
 * +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
 * ```
 *
 * @category RTCP
 *
 * @see
 * - [RFC 4585 section 6.3.2](https://datatracker.ietf.org/doc/html/rfc4585#section-6.3.2)
 */
export declare class SliPacket extends FeedbackPacket {
    #private;
    /**
     * @param view - If given it will be parsed. Otherwise an empty RTCP SLI
     *   packet will be created.
     *
     * @throws
     * - If given `view` does not contain a valid RTCP SLI packet.
     */
    constructor(view?: DataView);
    /**
     * Dump RTCP SLI packet info.
     */
    dump(): SliPacketDump;
    /**
     * @inheritDoc
     */
    getByteLength(): number;
    /**
     * @inheritDoc
     */
    serialize(buffer?: ArrayBuffer, byteOffset?: number): void;
    /**
     * @inheritDoc
     */
    clone(buffer?: ArrayBuffer, byteOffset?: number, serializationBuffer?: ArrayBuffer, serializationByteOffset?: number): SliPacket;
    /**
     * Get SLI items.
     */
    getItems(): {
        first: number;
        number: number;
        pictureId: number;
    }[];
    /**
     * Set SLI items.
     *
     * @remarks
     * - Serialization is needed after calling this method.
     */
    setItems(items: {
        first: number;
        number: number;
        pictureId: number;
    }[]): void;
    /**
     * Add SLI item value.
     *
     * @remarks
     * - Serialization is needed after calling this method.
     */
    addItem(first: number, number: number, pictureId: number): void;
}
//# sourceMappingURL=SliPacket.d.ts.map