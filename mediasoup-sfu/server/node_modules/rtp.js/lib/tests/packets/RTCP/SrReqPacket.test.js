"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SrReqPacket_1 = require("../../../packets/RTCP/SrReqPacket");
const FeedbackPacket_1 = require("../../../packets/RTCP/FeedbackPacket");
const RtcpPacket_1 = require("../../../packets/RTCP/RtcpPacket");
const helpers_1 = require("../../../utils/helpers");
const srReqPacketDump = {
    byteLength: 12,
    padding: 0,
    packetType: RtcpPacket_1.RtcpPacketType.RTPFB,
    count: 5,
    messageType: FeedbackPacket_1.RtpFeedbackMessageType.SR_REQ,
    senderSsrc: 0x00003344,
    mediaSsrc: 0x55667788
};
const array = new Uint8Array([
    0x85, 0xcd, 0x00, 0x02,
    0x00, 0x00, 0x33, 0x44,
    0x55, 0x66, 0x77, 0x88 // Media SSRC: 0x55667788
]);
const view = new DataView(array.buffer, array.byteOffset, array.byteLength);
describe('parse RTCP SR REQ packet', () => {
    test('buffer view is RTCP', () => {
        expect((0, RtcpPacket_1.isRtcp)(view)).toBe(true);
    });
    test('packet processing succeeds', () => {
        const packet = new SrReqPacket_1.SrReqPacket(view);
        expect(packet.needsSerialization()).toBe(false);
        expect(packet.dump()).toEqual(srReqPacketDump);
        expect((0, helpers_1.areDataViewsEqual)(packet.getView(), view)).toBe(true);
        packet.serialize();
        expect(packet.needsSerialization()).toBe(false);
        expect(packet.dump()).toEqual(srReqPacketDump);
        expect((0, helpers_1.areDataViewsEqual)(packet.getView(), view)).toBe(true);
        const clonedPacket = packet.clone();
        expect(clonedPacket.needsSerialization()).toBe(false);
        expect(clonedPacket.dump()).toEqual(srReqPacketDump);
        expect((0, helpers_1.areDataViewsEqual)(clonedPacket.getView(), view)).toBe(true);
    });
});
describe('create RTCP SR REQ packet', () => {
    const packet = new SrReqPacket_1.SrReqPacket();
    test('packet view is RTCP', () => {
        expect((0, RtcpPacket_1.isRtcp)(packet.getView())).toBe(true);
    });
    test('packet processing succeeds', () => {
        // No optional fields in this packet so serialization is never needed.
        packet.setSenderSsrc(srReqPacketDump.senderSsrc);
        packet.setMediaSsrc(srReqPacketDump.mediaSsrc);
        expect(packet.needsSerialization()).toBe(false);
        expect(packet.dump()).toEqual(srReqPacketDump);
        expect((0, helpers_1.areDataViewsEqual)(packet.getView(), view)).toBe(true);
        packet.serialize();
        expect(packet.needsSerialization()).toBe(false);
        expect(packet.dump()).toEqual(srReqPacketDump);
        expect((0, helpers_1.areDataViewsEqual)(packet.getView(), view)).toBe(true);
        const clonedPacket = packet.clone();
        expect(clonedPacket.needsSerialization()).toBe(false);
        expect(clonedPacket.dump()).toEqual(srReqPacketDump);
        expect((0, helpers_1.areDataViewsEqual)(clonedPacket.getView(), view)).toBe(true);
    });
});
