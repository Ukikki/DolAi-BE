"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GenericFeedbackPacket_1 = require("../../../packets/RTCP/GenericFeedbackPacket");
const FeedbackPacket_1 = require("../../../packets/RTCP/FeedbackPacket");
const RtcpPacket_1 = require("../../../packets/RTCP/RtcpPacket");
const helpers_1 = require("../../../utils/helpers");
const genericFeedbackPacket = {
    byteLength: 20,
    padding: 1,
    packetType: RtcpPacket_1.RtcpPacketType.PSFB,
    count: 15,
    messageType: FeedbackPacket_1.PsFeedbackMessageType.AFB,
    senderSsrc: 0x11223344,
    mediaSsrc: 0x55667788,
    bodyLength: 7
};
const array = new Uint8Array([
    0xaf, 0xce, 0x00, 0x04,
    0x11, 0x22, 0x33, 0x44,
    0x55, 0x66, 0x77, 0x88,
    0x00, 0x11, 0x22, 0x33,
    0x44, 0x55, 0x66, 0x01 // Padding (1 byte)
]);
const view = new DataView(array.buffer, array.byteOffset, array.byteLength);
const bodyView = new DataView(array.buffer, array.byteOffset + 12, 7);
describe('parse RTCP generic Feedback packet', () => {
    test('buffer view is RTCP', () => {
        expect((0, RtcpPacket_1.isRtcp)(view)).toBe(true);
    });
    test('packet processing succeeds', () => {
        const packet = new GenericFeedbackPacket_1.GenericFeedbackPacket(view);
        expect(packet.needsSerialization()).toBe(false);
        expect(packet.dump()).toEqual(genericFeedbackPacket);
        expect((0, helpers_1.areDataViewsEqual)(packet.getView(), view)).toBe(true);
        expect((0, helpers_1.areDataViewsEqual)(packet.getBody(), bodyView)).toBe(true);
        packet.serialize();
        expect(packet.needsSerialization()).toBe(false);
        expect(packet.dump()).toEqual(genericFeedbackPacket);
        expect((0, helpers_1.areDataViewsEqual)(packet.getView(), view)).toBe(true);
        expect((0, helpers_1.areDataViewsEqual)(packet.getBody(), bodyView)).toBe(true);
        const clonedPacket = packet.clone();
        expect(clonedPacket.needsSerialization()).toBe(false);
        expect(clonedPacket.dump()).toEqual(genericFeedbackPacket);
        expect((0, helpers_1.areDataViewsEqual)(clonedPacket.getView(), view)).toBe(true);
        expect((0, helpers_1.areDataViewsEqual)(clonedPacket.getBody(), bodyView)).toBe(true);
    });
});
describe('create RTCP generic Feedback packet', () => {
    const packet = new GenericFeedbackPacket_1.GenericFeedbackPacket(undefined, RtcpPacket_1.RtcpPacketType.PSFB, FeedbackPacket_1.PsFeedbackMessageType.AFB);
    test('packet view is RTCP', () => {
        expect((0, RtcpPacket_1.isRtcp)(packet.getView())).toBe(true);
    });
    test('packet processing succeeds', () => {
        packet.setSenderSsrc(genericFeedbackPacket.senderSsrc);
        packet.setMediaSsrc(genericFeedbackPacket.mediaSsrc);
        // Let's set body with 7 bytes length so it should be internally padded
        // to 8.
        packet.setBody((0, helpers_1.numericArrayToDataView)([0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66]));
        expect(packet.needsSerialization()).toBe(true);
        expect(packet.dump()).toEqual(genericFeedbackPacket);
        expect((0, helpers_1.areDataViewsEqual)(packet.getView(), view)).toBe(true);
        expect((0, helpers_1.areDataViewsEqual)(packet.getBody(), bodyView)).toBe(true);
        packet.serialize();
        expect(packet.needsSerialization()).toBe(false);
        expect(packet.dump()).toEqual(genericFeedbackPacket);
        expect((0, helpers_1.areDataViewsEqual)(packet.getView(), view)).toBe(true);
        expect((0, helpers_1.areDataViewsEqual)(packet.getBody(), bodyView)).toBe(true);
        const clonedPacket = packet.clone();
        expect(clonedPacket.needsSerialization()).toBe(false);
        expect(clonedPacket.dump()).toEqual(genericFeedbackPacket);
        expect((0, helpers_1.areDataViewsEqual)(clonedPacket.getView(), view)).toBe(true);
        expect((0, helpers_1.areDataViewsEqual)(clonedPacket.getBody(), bodyView)).toBe(true);
    });
});
